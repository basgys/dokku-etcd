#!/usr/bin/env bash
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x
source "$(dirname "$0")/config"

get_service_name() {
  local SERVICE="$1"
  echo "dokku.etcd.$SERVICE"
}

get_random_ports() {
  local iterations="${1:-1}"
  for (( i=0; i < iterations; i++ )); do
    local port=$RANDOM
    local quit=0
    while [ "$quit" -ne 1 ]; do
      netstat -an | grep $port > /dev/null
      if [ $? -gt 0 ]; then
        quit=1
      else
        port=$((port + 1))
      fi
    done
    echo $port
  done
}

docker_ports_options() {
  local PORTS=("$@")
  for (( i=0; i < ${#PLUGIN_DATASTORE_PORTS[@]}; i++ )); do
    echo -n "-p ${PORTS[i]}:${PLUGIN_DATASTORE_PORTS[i]} "
  done
}

verify_service_name() {
  local SERVICE="$1"
  [[ ! -n "$SERVICE" ]] && dokku_log_fail "(verify_service_name) SERVICE must not be null"
  [[ ! -d "$ETCD_ROOT/$SERVICE" ]] && dokku_log_fail "etcd service $SERVICE does not exist"
  return 0
}

service_alias() {
  local SERVICE="$1"
  local SERVICE_NAME=$(get_service_name "$SERVICE")
  echo "$SERVICE_NAME" | tr ._ -
}

service_url() {
  local SERVICE="$1"
  local SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"

  local SERVICE_ALIAS="$(service_alias "$SERVICE")"
  echo "http://$SERVICE_ALIAS:${PLUGIN_DATASTORE_PORTS[0]}"
}

service_alternative_alias() {
  local EXISTING_CONFIG="$1"
  local COLORS=(AQUA BLACK BLUE FUCHSIA GRAY GREEN LIME MAROON NAVY OLIVE PURPLE RED SILVER TEAL WHITE YELLOW)
  local ALIAS;

  while [[ -z $ALIAS ]]; do
    local IDX=$((RANDOM % ${#COLORS[*]}))
    local COLOR=${COLORS[IDX]}
    ALIAS="${PLUGIN_ALT_ALIAS}_${COLOR}"
    local IN_USE=$(echo "$EXISTING_CONFIG" | grep "${ALIAS}_URL")
    if [[ -n $IN_USE ]]; then
      unset ALIAS
    fi
  done
  echo "$ALIAS"
}

service_port_pause() {
  local SERVICE="$1"
  local SERVICE_ROOT="$ETCD_ROOT/$SERVICE"
  local EXPOSED_NAME="$(get_service_name "$SERVICE").ambassador"
  local PORT_FILE="$SERVICE_ROOT/PORT"
  local LOG_FAIL="$2"

  if [[ "$LOG_FAIL" == "true" ]]; then
    [[ ! -f "$PORT_FILE" ]] && dokku_log_fail "Service not exposed"
  else
    [[ ! -f "$PORT_FILE" ]] && return 0
  fi

  docker stop "$EXPOSED_NAME" > /dev/null
  docker rm "$EXPOSED_NAME" > /dev/null
  if [[ "$LOG_FAIL" == "true" ]]; then
    dokku_log_info1 "Service $SERVICE unexposed"
  fi
}

service_port_unpause() {
  local SERVICE="$1"
  local SERVICE_ROOT="$ETCD_ROOT/$SERVICE"
  local SERVICE_NAME=$(get_service_name "$SERVICE")
  local EXPOSED_NAME="${SERVICE_NAME}.ambassador"
  local PORT_FILE="$SERVICE_ROOT/PORT"
  local LOG_FAIL="$2"

  local PORTS=(${@:3})
  PORTS=(${PORTS[@]:-$(get_random_ports ${#PLUGIN_DATASTORE_PORTS[@]})})
  local ID=$(cat "$SERVICE_ROOT/ID")

  [[ "${#PORTS[@]}" != "${#PLUGIN_DATASTORE_PORTS[@]}" ]] && dokku_log_fail "${#PLUGIN_DATASTORE_PORTS[@]} ports to be exposed need to be provided"

  if [[ "$LOG_FAIL" == "true" ]]; then
    [[ -f "$PORT_FILE" ]] && PORTS=($(cat "$PORT_FILE")) && dokku_log_fail "Service $SERVICE already exposed on port(s) ${PORTS[*]}"
  else
    [[ ! -f "$PORT_FILE" ]] && return 0
    PORTS=($(cat "$PORT_FILE"))
  fi

  echo "${PORTS[@]}" > "$PORT_FILE"

  docker run -d --link "$SERVICE_NAME:etcd" --name "$EXPOSED_NAME" $(docker_ports_options "${PORTS[@]}") --restart always --label dokku=ambassador --label dokku.ambassador=etcd svendowideit/ambassador > /dev/null
  if [[ "$LOG_FAIL" == "true" ]]; then
    dokku_log_info1 "Service $SERVICE exposed on port(s) ${PORTS[*]}"
  fi
}

service_start() {
  local SERVICE="$1"
  local SERVICE_ROOT="$ETCD_ROOT/$SERVICE"
  local SERVICE_NAME=$(get_service_name "$SERVICE")
  local EXPOSED_NAME="$(get_service_name "$SERVICE").ambassador"  

  local ID=$(docker ps -f status=running | grep "$SERVICE_NAME" | awk '{print $1}') || true
  [[ -n $ID ]] && dokku_log_warn "Service is already started" && return 0

  dokku_log_info1_quiet "Starting container"
  local PREVIOUS_ID=$(docker ps -f status=exited | grep "$SERVICE_NAME" | awk '{print $1}') || true
  if [[ -n $PREVIOUS_ID ]]; then
    docker start "$PREVIOUS_ID" > /dev/null
    service_port_unpause "$SERVICE"
    dokku_log_info2 "Container started"
  else
    dokku_log_verbose_quiet "No container exists for $SERVICE"
  fi
}

service_port_expose() {
  service_start "$1"
  service_port_unpause "$1" "true" "${@:2}"
}

service_port_unexpose() {
  local SERVICE="$1"
  local SERVICE_ROOT="$ETCD_ROOT/$SERVICE"
  local PORT_FILE="$SERVICE_ROOT/PORT"

  service_port_pause "$SERVICE" "true"
  rm -rf "$PORT_FILE"
}

service_stop() {
  local SERVICE="$1"
  local SERVICE_ROOT="$ETCD_ROOT/$SERVICE";
  local SERVICE_NAME=$(get_service_name "$SERVICE")
  local ID=$(docker ps -f status=running | grep "$SERVICE_NAME" | awk '{print $1}') || true
  [[ -z $ID ]] && dokku_log_warn "Service is already stopped" && return 0

  if [[ -n $ID ]]; then
    dokku_log_info1_quiet "Stopping container"
    docker stop "$SERVICE_NAME" > /dev/null
    service_port_pause "$SERVICE"
    dokku_log_info2 "Container stopped"
  else
    dokku_log_verbose_quiet "No container exists for $SERVICE"
  fi
}

service_link() {
  local APP="$2"
  local SERVICE="$1"
  local SERVICE_URL=$(service_url "$SERVICE")
  local SERVICE_NAME=$(get_service_name "$SERVICE")
  local SERVICE_ROOT="$ETCD_ROOT/$SERVICE";

  local EXISTING_CONFIG=$(dokku config "$APP")
  local LINK=$(echo "$EXISTING_CONFIG" | grep "$SERVICE_URL" | cut -d: -f1) || true
  local DEFAULT_ALIAS=$(echo "$EXISTING_CONFIG" | grep "${PLUGIN_DEFAULT_ALIAS}_URL") || true
  local SERVICE_ALIAS=$(service_alias "$SERVICE")
  local LINKS_FILE="$SERVICE_ROOT/LINKS"

  [[ -n $LINK ]] && dokku_log_fail "Already linked as $LINK"
  mkdir -p "$SERVICE_ROOT" || dokku_log_fail "Unable to create service directory"
  touch "$LINKS_FILE"
  echo "$APP" >> "$LINKS_FILE"
  sort "$LINKS_FILE" -u -o "$LINKS_FILE"

  local ALIAS="$PLUGIN_DEFAULT_ALIAS"
  if [[ -n $DEFAULT_ALIAS ]]; then
    ALIAS=$(service_alternative_alias "$EXISTING_CONFIG")
  fi
  dokku docker-options:add "$APP" build,deploy,run "--link $SERVICE_NAME:$SERVICE_ALIAS"
  dokku config:set "$APP" "${ALIAS}_URL=$SERVICE_URL"
}

service_unlink() {
  local APP="$2"
  local SERVICE="$1"
  local SERVICE_URL=$(service_url "$SERVICE")
  local SERVICE_NAME=$(get_service_name "$SERVICE")
  local EXISTING_CONFIG=$(dokku config "$APP")
  local SERVICE_ALIAS=$(service_alias "$SERVICE")
  local LINK=($(echo "$EXISTING_CONFIG" | grep "$SERVICE_URL" | cut -d: -f1)) || true

  [[ -z ${LINK[*]} ]] && dokku_log_fail "Not linked to app $APP"
  remove_from_links_file "$SERVICE" "$APP"

  dokku docker-options:remove "$APP" build,deploy,run "--link $SERVICE_NAME:$SERVICE_ALIAS"
  dokku config:unset "$APP" "${LINK[*]}"
}

service_logs() {
  local SERVICE="$1"
  local SERVICE_ROOT="$ETCD_ROOT/$SERVICE"
  local ID=$(cat "$SERVICE_ROOT/ID")

  if [[ $2 == "-t" ]]; then
    DOKKU_LOGS_ARGS="--follow"
  else
    DOKKU_LOGS_ARGS="--tail 100"
  fi

  docker logs $DOKKU_LOGS_ARGS "$ID"
}
